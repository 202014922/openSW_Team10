import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import ApiService from '../../services/ApiService';
import { Container, Typography, Box, List, ListItem, ListItemText, Button, Alert, Avatar, ListItemAvatar } from '@mui/material';
import { motion } from 'framer-motion';
import AuthService from '../../services/AuthService';

function ChatList() {
    const [chats, setChats] = useState([]);
    const user = AuthService.getCurrentUser();
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchChats = async () => {
            try {
                // user.id가 제대로 정의되었는지 확인
                if (!user || !user.id) {
                    setError('사용자 정보가 올바르지 않습니다.');
                    return;
                }
                const response = await ApiService.getUserChats(user.id);
                setChats(response.data);
            } catch (err) {
                console.error('채팅 목록을 불러오는 데 실패했습니다.', err);
                setError('채팅 목록을 불러오는 데 실패했습니다.');
            }
        };

        fetchChats();
    }, [user.id]);

    return (
        <Container maxWidth="md">
            <motion.div
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
            >
                <Box sx={{ mt: 4 }}>
                    <Typography variant="h4" gutterBottom>
                        채팅 목록
                    </Typography>
                    {error && <Alert severity="error">{error}</Alert>}
                    {chats.length === 0 ? (
                        <Typography variant="body1" align="center">
                            채팅방이 없습니다.
                        </Typography>
                    ) : (
                        <List>
                            {chats.map((chatId, index) => {
                                // 채팅 상대 사용자 ID 추출
                                const parts = chatId.split('_');
                                const smallerId = parseInt(parts[1]);
                                const largerId = parseInt(parts[2]);
                                const otherUserId = smallerId === user.id ? largerId : smallerId;

                                // 사용자 정보를 가져오기 위해 추가 API 호출을 고려할 수 있습니다.
                                // 여기서는 간단히 상대방 ID만 표시합니다.
                                return (
                                    <ListItem key={index} secondaryAction={
                                        <Button component={Link} to={`/chat/${chatId}`} variant="contained" color="primary">
                                            채팅하기
                                        </Button>
                                    }>
                                        <ListItemAvatar>
                                            <Avatar>{`U${otherUserId}`}</Avatar>
                                        </ListItemAvatar>
                                        <ListItemText primary={`채팅 상대: 유저 ${otherUserId}`} />
                                    </ListItem>
                                );
                            })}
                        </List>
                    )}
                </Box>
            </motion.div>
        </Container>
    );
}

export default ChatList;